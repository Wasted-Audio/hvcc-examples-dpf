name: MOD

on:
  push:
  repository_dispatch:
    types: [nightly]

env:
  HVCC_VERSION: 1499fda6e3a6ae5b8c0ecd29df05d9bc5e72dac7
  CACHE_VERSION: 1
  WITH_LTA: 'false'

jobs:
  modduo:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v3
        id: mpb-cache
        with:
          path: |
            ~/mod-workdir
          key: modduo-static-v${{ env.CACHE_VERSION }}-${{ env.WITH_LTO }}
      - name: Set up dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq acl bc curl cvs git mercurial rsync subversion wget bison bzip2 flex gawk gperf gzip help2man nano perl patch tar texinfo unzip automake binutils build-essential cpio libtool libncurses-dev pkg-config python libtool-bin liblo-dev qemu-user-static
          sudo apt-get install -yqq pandoc texlive-latex-recommended texlive-latex-extra
      - name: Bootstrap toolchain
        if: steps.mpb-cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 https://github.com/moddevices/mod-plugin-builder.git deps/mod-plugin-builder
          sed -i "s/CT_LOG_PROGRESS_BAR=y/CT_LOG_PROGRESS_BAR=n/" deps/mod-plugin-builder/toolchain/*.config
          $(pwd)/deps/mod-plugin-builder/bootstrap.sh modduo-static minimal && $(pwd)/deps/mod-plugin-builder/.clean-install.sh modduo-static

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - run: python -m pip install -U pip

      - name: Install pinned hvcc
        run: |
          python -m pip install git+https://github.com/Wasted-Audio/hvcc.git@${{ env.HVCC_VERSION }}
        if: ${{ !github.event.client_payload.nightly }}
      - name: Install develop hvcc
        run: |
          python -m pip install git+https://github.com/Wasted-Audio/hvcc.git@${{ github.event.client_payload.branch }}
        if: ${{ github.event.client_payload.nightly }}

      - name: Build for modduo
        run: |
          make modduo HEADLESS=true WITH_LTO=${{ env.WITH_LTO }} MODDUO=true -j $(nproc)

      - name: Set sha8 (non-release)
        if: startsWith(github.ref, 'refs/tags/') != true
        id: slug1
        run: echo "action_tag=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
      - name: Set tag (release)
        if: startsWith(github.ref, 'refs/tags/')
        id: slug2
        run: echo "action_tag=$(echo ${{ github.ref_name }})" >> $GITHUB_ENV

      - name: Pack binaries
        run: |
          tar -c -h --hard-dereference -z -f ${{ github.event.repository.name }}-modduo-${{ github.event.pull_request.number || env.action_tag }}.tar.g -C bin $(ls bin | grep lv2)
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-modduo-${{ github.event.pull_request.number || env.action_tag }}
          path: |
            *.tar.gz
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            *.tar.gz

  modduox:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v3
        id: mpb-cache
        with:
          path: |
            ~/mod-workdir
          key: modduox-v${{ env.CACHE_VERSION }}-${{ env.WITH_LTO }}
      - name: Set up dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq acl bc curl cvs git mercurial rsync subversion wget bison bzip2 flex gawk gperf gzip help2man nano perl patch tar texinfo unzip automake binutils build-essential cpio libtool libncurses-dev pkg-config python libtool-bin liblo-dev qemu-user-static
          sudo apt-get install -yqq pandoc texlive-latex-recommended texlive-latex-extra
      - name: Bootstrap toolchain
        if: steps.mpb-cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 https://github.com/moddevices/mod-plugin-builder.git deps/mod-plugin-builder
          sed -i "s/CT_LOG_PROGRESS_BAR=y/CT_LOG_PROGRESS_BAR=n/" deps/mod-plugin-builder/toolchain/*.config
          $(pwd)/deps/mod-plugin-builder/bootstrap.sh modduox-static minimal && $(pwd)/deps/mod-plugin-builder/.clean-install.sh modduox-static

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - run: python -m pip install -U pip

      - name: Install pinned hvcc
        run: |
          python -m pip install git+https://github.com/Wasted-Audio/hvcc.git@${{ env.HVCC_VERSION }}
        if: ${{ !github.event.client_payload.nightly }}
      - name: Install develop hvcc
        run: |
          python -m pip install git+https://github.com/Wasted-Audio/hvcc.git@${{ github.event.client_payload.branch }}
        if: ${{ github.event.client_payload.nightly }}

      - name: Build for modduox
        run: |
          make modduox HEADLESS=true WITH_LTO=${{ env.WITH_LTO }} -j $(nproc)

      - name: Set sha8 (non-release)
        if: startsWith(github.ref, 'refs/tags/') != true
        id: slug1
        run: echo "action_tag=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
      - name: Set tag (release)
        if: startsWith(github.ref, 'refs/tags/')
        id: slug2
        run: echo "action_tag=$(echo ${{ github.ref_name }})" >> $GITHUB_ENV

      - name: Pack binaries
        run: |
          tar -c -h --hard-dereference -z -f ${{ github.event.repository.name }}-modduox-${{ github.event.pull_request.number || env.action_tag }}.tar.g -C bin $(ls bin | grep lv2)
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-modduox-${{ github.event.pull_request.number || env.action_tag }}
          path: |
            *.tar.gz
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            *.tar.gz

  moddwarf:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v3
        id: mpb-cache
        with:
          path: |
            ~/mod-workdir
          key: moddwarf-v${{ env.CACHE_VERSION }}-${{ env.WITH_LTO }}
      - name: Set up dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq acl bc curl cvs git mercurial rsync subversion wget bison bzip2 flex gawk gperf gzip help2man nano perl patch tar texinfo unzip automake binutils build-essential cpio libtool libncurses-dev pkg-config python libtool-bin liblo-dev qemu-user-static
          sudo apt-get install -yqq pandoc texlive-latex-recommended texlive-latex-extra
      - name: Bootstrap toolchain
        if: steps.mpb-cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 https://github.com/moddevices/mod-plugin-builder.git deps/mod-plugin-builder
          sed -i "s/CT_LOG_PROGRESS_BAR=y/CT_LOG_PROGRESS_BAR=n/" deps/mod-plugin-builder/toolchain/*.config
          $(pwd)/deps/mod-plugin-builder/bootstrap.sh moddwarf minimal && $(pwd)/deps/mod-plugin-builder/.clean-install.sh moddwarf

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - run: python -m pip install -U pip

      - name: Install pinned hvcc
        run: |
          python -m pip install git+https://github.com/Wasted-Audio/hvcc.git@${{ env.HVCC_VERSION }}
        if: ${{ !github.event.client_payload.nightly }}
      - name: Install develop hvcc
        run: |
          python -m pip install git+https://github.com/Wasted-Audio/hvcc.git@${{ github.event.client_payload.branch }}
        if: ${{ github.event.client_payload.nightly }}

      - name: Build for moddwarf
        run: |
          make moddwarf HEADLESS=true WITH_LTO=${{ env.WITH_LTO }} -j $(nproc)

      - name: Set sha8 (non-release)
        if: startsWith(github.ref, 'refs/tags/') != true
        id: slug1
        run: echo "action_tag=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
      - name: Set tag (release)
        if: startsWith(github.ref, 'refs/tags/')
        id: slug2
        run: echo "action_tag=$(echo ${{ github.ref_name }})" >> $GITHUB_ENV

      - name: Pack binaries
        run: |
          tar -c -h --hard-dereference -z -f ${{ github.event.repository.name }}-moddwarf-${{ github.event.pull_request.number || env.action_tag }}.tar.g -C bin $(ls bin | grep lv2)
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-moddwarf-${{ github.event.pull_request.number || env.action_tag }}
          path: |
            *.tar.gz
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            *.tar.gz
